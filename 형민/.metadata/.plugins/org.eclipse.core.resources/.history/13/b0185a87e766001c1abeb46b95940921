package com.camflex.client.member.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.camflex.client.member.service.MemberService;
import com.camflex.client.member.vo.MemberVO;
import com.camflex.common.util.BCrypt;
import com.camflex.common.util.SHA256;

@Controller
public class MemberController {
	// 로깅을 위한 변수
	private Logger log = LoggerFactory.getLogger(MemberController.class);

	@Autowired
	private MemberService memberService;

	/* 회원가입 폼 */
	@RequestMapping(value = "/joinForm", method = RequestMethod.GET)
	public String joinForm() {
		log.info("joinForm.do get 성공");
		return "/member/join";
	}

	/* 회원가입 처리 */

	/*
	 * @RequestMapping(value = "/insertMember", method = RequestMethod.POST) public
	 * String insertMember(@ModelAttribute MemberVO vo) throws Exception {
	 * log.info("회원가입 처리 완료"); memberService.insertMember(vo); return
	 * "/member/insert";
	 * 
	 * }
	 */

	@RequestMapping(value = "/insertMember", method = RequestMethod.POST)
	public String insertMember(@ModelAttribute MemberVO vo) throws Exception {
		log.info("회원가입 처리 완료");
		SHA256 sha = SHA256.getInsatnce();
		String shaPass = sha.getSha256(vo.getM_pw().getBytes());
		String bcPass = BCrypt.hashpw(shaPass, BCrypt.gensalt());

		vo.setM_pw(bcPass);

		memberService.insertMember(vo);
		return "/member/insert";

	}

	/* 회원가입 처리 (암호화) */
	/*
	 * @RequestMapping(value = "/insertMember", method = RequestMethod.POST) public
	 * String insertMember(@ModelAttribute MemberVO vo) throws Exception {
	 * log.info("회원가입 처리 완료"); int result = memberService.idChk(vo); try { if
	 * (result == 1) { return "/member/insertMember"; } else if (result == 0) {
	 * String inputPass = vo.getM_pw(); String pwd = pwdEncoder.encode(inputPass);
	 * vo.setM_pw(vo);
	 * 
	 * memberService.insertMember(vo);
	 * 
	 * }
	 * 
	 * } catch (Exception e) { throw new RuntimeException(); }
	 * 
	 * return "/member/insert";
	 * 
	 * }
	 */

}
